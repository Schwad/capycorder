// Generated by CoffeeScript 1.3.1
(function() {

  window.Capybara || (window.Capybara = {});

  Capybara.Recorders || (Capybara.Recorders = {});

  Capybara.Recorders.Actions = (function() {

    Actions.name = 'Actions';

    Actions.prototype.actions = [];

    Actions.prototype.namespace = 'actionrecorder';

    Actions.prototype.events = {
      'change input[type=file]': Actions.attachFile,
      'change input[type=checkbox]': Actions.check,
      'click input[type=radio]': Actions.choose,
      'click input[type=submit]': Actions.clickButton,
      'click input[type=reset]': Actions.clickButton,
      'click input[type=button]': Actions.clickButton,
      'click button': Actions.clickButton,
      'click a': Actions.clickLink,
      'keyup input[type=text]': Actions.fillIn,
      'keyup input[type=password]': Actions.fillIn,
      'keyup input[type=email]': Actions.fillIn,
      'keyup input[type=search]': Actions.fillIn,
      'keyup textarea': Actions.fillIn,
      'change select': Actions.select
    };

    function Actions(options) {
      var _ref;
      this.$scope = $(options.scope || document);
      this.afterCaptureCallback = (_ref = options.afterCapture) != null ? _ref : function() {};
    }

    Actions.prototype.start = function() {
      return this._attachEvents();
    };

    Actions.prototype.stop = function() {
      return this._detachEvents();
    };

    Actions.prototype.attachFile = function($el) {
      var locator;
      locator = $el.locator(['name', 'id', 'label']);
      return this.findScopeAndCapture('attachFile', $el, locator, {
        file: $el.val()
      });
    };

    Actions.prototype.check = function($el) {
      var locator;
      if ($el.is(':checked')) {
        locator = $el.locator(['name', 'id', 'label']);
        return this.findScopeAndCapture('check', $el, locator);
      } else {
        return this.uncheck($el);
      }
    };

    Actions.prototype.uncheck = function($el) {
      var locator;
      locator = $el.locator(['name', 'id', 'label']);
      return this.findScopeAndCapture('uncheck', $el, locator);
    };

    Actions.prototype.choose = function($el) {
      var locator;
      locator = $el.locator(['label', 'id', 'name']);
      return this.findScopeAndCapture('choose', $el, locator);
    };

    Actions.prototype.clickButton = function($el) {
      var locator;
      locator = $el.locator(['id', 'text', 'value']);
      return this.findScopeAndCapture('clickButton', $el, locator);
    };

    Actions.prototype.clickLink = function($el) {
      var locator;
      locator = $el.locator(['id', 'text', 'imgAlt']);
      return this.findScopeAndCapture('clickLink', $el, locator);
    };

    Actions.prototype.fillIn = function($el) {
      var locator, previous;
      locator = $el.locator(['name', 'id', 'label']);
      previous = _.last(this.actions);
      if (previous && previous.name === 'fillIn' && previous.locator === locator) {
        return previous.options["with"] = $el.val();
      } else {
        return this.findScopeAndCapture('fillIn', $el, locator, {
          width: $el.val()
        });
      }
    };

    Actions.prototype.select = function($el) {
      var locator;
      locator = $el.locator(['name', 'id', 'label']);
      return this.findScopeAndCapture('select', $el, $el.val(), {
        from: locator
      });
    };

    Actions.prototype.findScopeAndCapture = function(name, $el, locator, options) {
      return this.capture(name, this._formScope($el), locator, options);
    };

    Actions.prototype.capture = function(name, locator, scope, options) {
      var action;
      if (options == null) {
        options = {};
      }
      action = {
        type: this.namespace,
        name: name,
        locator: locator,
        scope: scope,
        options: options
      };
      this.actions.push(action);
      return this.afterCaptureCallback(action);
    };

    Actions.prototype._formScope = function($el) {
      var $form;
      if (($form = $el.parents('form')).length) {
        return $form.locator(['id']);
      } else {
        return null;
      }
    };

    Actions.prototype._nsevent = function(event) {
      return [event, this.namespace].join('.');
    };

    Actions.prototype._attachEvents = function() {
      var element, event, method, target, _i, _len, _ref, _ref1, _results,
        _this = this;
      _ref = this.events;
      _results = [];
      for (method = _i = 0, _len = _ref.length; _i < _len; method = ++_i) {
        target = _ref[method];
        _ref1 = target.split(' '), event = _ref1[0], element = _ref1[1];
        _results.push(this.$scope.delegate(element, this._nsevent(event), function(e) {
          return method(e);
        }));
      }
      return _results;
    };

    Actions.prototype._detachEvents = function() {
      return this.$scope.undelegate("." + this.namespace);
    };

    return Actions;

  })();

}).call(this);
