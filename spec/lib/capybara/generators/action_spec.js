// Generated by CoffeeScript 1.3.1
(function() {

  describe('Capybara action generator', function() {
    describe('#isScoped', function() {
      it('should return true if scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Action({
          scope: '#foo'
        });
        return expect(generator.isScoped()).toBeTruthy();
      });
      return it('should return false if no scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Action;
        return expect(generator.isScoped()).toBeFalsy();
      });
    });
    return describe('templates', function() {
      var allOptions, generator;
      generator = null;
      allOptions = {
        scope: '#foo',
        locator: 'Foo',
        options: {
          path: '/foo/bar',
          file: 'foo/bar.png',
          "with": 'foobar',
          from: 'foo'
        }
      };
      describe('#scopeTemplate', function() {
        beforeEach(function() {
          return generator = new Capybara.Generators.Action(allOptions);
        });
        it('should return an array', function() {
          return expect(typeof generator.scopeToPartials()).toBe('object');
        });
        return it('should match a tempate', function() {
          var out;
          out = generator.scopeToPartials();
          expect(out.length).toEqual(2);
          expect(out[0]).toBe("within('#foo') do");
          return expect(out[1]).toBe('end');
        });
      });
      return describe('#toString', function() {
        var expectations, method, template, _results;
        expectations = {
          'attachFile': "attach_file('Foo', 'foo/bar.png')",
          'check': "check('Foo')",
          'uncheck': "uncheck('Foo')",
          'choose': "choose('Foo')",
          'click_button': "click_button('Foo')",
          'fillIn': "fill_in('Foo', :with => 'foobar')",
          'select': "select('Foo', :from => 'foo')",
          'clickLink': "click_link('Foo')",
          'visitPath': "visit('/foo/bar')"
        };
        _results = [];
        for (method in expectations) {
          template = expectations[method];
          _results.push(it("should return correct template for " + method, function() {
            var options;
            options = _.extend(allOptions, {
              name: method
            });
            generator = new Capybara.Generators.Action(options);
            return expect(generator.toString()).toBe(template);
          }));
        }
        return _results;
      });
    });
  });

}).call(this);
