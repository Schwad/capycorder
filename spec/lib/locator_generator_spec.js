// Generated by CoffeeScript 1.3.1
(function() {

  describe('LocatorGenerator', function() {
    beforeEach(function() {
      return this.locator = new LocatorGenerator;
    });
    return describe('inputs', function() {
      beforeEach(function() {
        var fixture;
        fixture = "<div>\n  <label for=\"baa\">Baa</label>\n  <input name=\"bar\" id=\"bat\" type=\"password\" />\n  <input name=\"foo\" type=\"text\" />\n  <label>Boo\n    <input name=\"boo\" id=\"boo\" type=\"checkbox\" />\n  </label>\n  <input name=\"baa\" id=\"baa\" type=\"checkbox\" />\n  <input type=\"button\" value=\"Button!\" />\n  <input type=\"submit\" value=\"Submit!\" />\n  <input type=\"reset\" value=\"Reset!\" />\n  <button>Save</button>\n  <label>Select me\n    <select>\n      <option value=\"foo\">Foo</option>\n    </select>\n  <label>\n</div>";
        return setFixtures(fixture);
      });
      it('should prefer the label of an input', function() {
        var $input, locator;
        $input = $('input[name=boo]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Boo',
          type: 'string'
        });
      });
      it('should find a non-wrapping label for an input', function() {
        var $input, locator;
        $input = $('input[name=baa]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Baa',
          type: 'string'
        });
      });
      it('should prefer the id name', function() {
        var $input, locator;
        $input = $('input[name=bar]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'bat',
          type: 'string'
        });
      });
      it('should return the name if it exists', function() {
        var $input, locator;
        $input = $('input[name=foo]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'foo',
          type: 'string'
        });
      });
      it('should return the value for a input of type button', function() {
        var $input, locator;
        $input = $('input[type=button]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Button!',
          type: 'string'
        });
      });
      it('should return the value for a input of type submit', function() {
        var $input, locator;
        $input = $('input[type=submit]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Submit!',
          type: 'string'
        });
      });
      it('should return the value for a input of type reset', function() {
        var $input, locator;
        $input = $('input[type=reset]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Reset!',
          type: 'string'
        });
      });
      it('should return the value for a input of type reset', function() {
        var $input, locator;
        $input = $('input[type=reset]');
        locator = this.locator.generate($input);
        return expect(locator).toEqual({
          value: 'Reset!',
          type: 'string'
        });
      });
      it('should return the text for a button', function() {
        var $button, locator;
        $button = $('button');
        locator = this.locator.generate($button);
        return expect(locator).toEqual({
          value: 'Save',
          type: 'string'
        });
      });
      return it('should return the text for a select', function() {
        var $select, locator;
        $select = $('select');
        locator = this.locator.generate($select);
        return expect(locator).toEqual({
          value: 'Select me',
          type: 'string'
        });
      });
    });
  });

}).call(this);
